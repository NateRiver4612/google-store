{"ast":null,"code":"import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport StoreActionTypes from './store.type';\nimport { convertCollectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { fetchCollectionFailure, fetchCollectionSuccess } from './store.action';\nexport function* fetchCollectionAll() {\n  const collectionRef = firestore.collection('store');\n\n  try {\n    const snapShot = yield collectionRef.get();\n    const Items = convertCollectionsSnapshotToMap(snapShot);\n    yield put(fetchCollectionSuccess(Items));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n}\nexport function* onfetchCollectionsStart() {\n  yield takeLatest(StoreActionTypes.FETCH_COLLECTION_START, fetchCollectionAll);\n}\nexport function* storeSaga() {\n  yield all([call(onfetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/google-play/client/src/redux/store/store.saga.js"],"names":["takeLatest","call","all","put","StoreActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionFailure","fetchCollectionSuccess","fetchCollectionAll","collectionRef","collection","snapShot","get","Items","error","message","onfetchCollectionsStart","FETCH_COLLECTION_START","storeSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA6BC,GAA7B,QAAuC,oBAAvC;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,SAASC,+BAAT,EAA0CC,SAA1C,QAA2D,+BAA3D;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,gBAA/D;AAGA,OAAO,UAAUC,kBAAV,GAA8B;AACjC,QAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,OAArB,CAAtB;;AAEA,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,KAAK,GAAGT,+BAA+B,CAACO,QAAD,CAA7C;AAEA,UAAMT,GAAG,CAACK,sBAAsB,CAACM,KAAD,CAAvB,CAAT;AAEH,GAND,CAMC,OAAMC,KAAN,EAAY;AACT,UAAMZ,GAAG,CAACI,sBAAsB,CAACQ,KAAK,CAACC,OAAP,CAAvB,CAAT;AACH;AACJ;AAKD,OAAO,UAAUC,uBAAV,GAAmC;AACtC,QAAMjB,UAAU,CAACI,gBAAgB,CAACc,sBAAlB,EAA0CT,kBAA1C,CAAhB;AACH;AAGD,OAAO,UAAWU,SAAX,GAAsB;AACzB,QAAMjB,GAAG,CAAC,CAACD,IAAI,CAACgB,uBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,call,all, put} from 'redux-saga/effects';\r\nimport StoreActionTypes from './store.type';\r\nimport { convertCollectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionFailure, fetchCollectionSuccess } from './store.action';\r\n\r\n\r\nexport function* fetchCollectionAll(){\r\n    const collectionRef = firestore.collection('store')\r\n\r\n    try{\r\n        const snapShot = yield collectionRef.get()\r\n        const Items = convertCollectionsSnapshotToMap(snapShot)\r\n\r\n        yield put(fetchCollectionSuccess(Items))   \r\n\r\n    }catch(error){\r\n        yield put(fetchCollectionFailure(error.message))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function* onfetchCollectionsStart(){\r\n    yield takeLatest(StoreActionTypes.FETCH_COLLECTION_START, fetchCollectionAll);\r\n}\r\n\r\n\r\nexport function * storeSaga(){\r\n    yield all([call(onfetchCollectionsStart)])\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}