{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\google-play\\\\client\\\\src\\\\page\\\\Related-Collection\\\\Related-Collection.page.jsx\";\nimport React, { useEffect } from 'react';\nimport RelatedItem from '../../component/related-Item/Related-Item.component';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { selectMovies, selectItemsByOption, selectRelatedCollection } from '../../redux/store/store.selector';\nimport { realpath } from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RelatedCollection = ({\n  id,\n  type,\n  items,\n  doc\n}) => {\n  const randomList = [];\n  const typeArr = type.split(',');\n  const relate = [];\n  console.log(items); //function to return in the index of given value from the given list\n\n  const index = (item, arr) => {\n    var one = 0;\n    arr.map((key, index) => {\n      if (parseInt(key) == parseInt(item)) {\n        one = index;\n      }\n    });\n    return one;\n  }; //create relate list with every related item include the current type\n\n\n  Object.keys(items).map((key, value) => {\n    if (typeArr.includes(key)) {\n      const list = items[key];\n      Object.keys(list).map(key => {\n        relate.push(list[key]);\n      });\n    }\n  }); //erase every duplicate item\n\n  for (var i = 0; i < relate.length; i++) {\n    for (var j = i + 1; j < relate.length - 1; j++) {\n      if (relate[i]['id'] == relate[j]['id']) {\n        relate.splice(j, 1);\n      }\n    }\n  }\n\n  console.log(relate); //select relate more specific\n  //the id of items except the chosen id\n\n  const relateId = [];\n  relate.map(item => {\n    if (item['id'] != id) {\n      relateId.push(item['id']);\n    }\n  }); //randomize the id list\n\n  var ranlist = [];\n\n  while (relateId.length > 0) {\n    var random = relateId[Math.floor(Math.random() * relateId.length)];\n    ranlist.push(random);\n    relateId.splice(index(random, relateId), 1);\n  } //create list of items followed id list order\n\n\n  const itemList = [];\n  ranlist.map(key => {\n    for (var i = 0; i < relate.length; i++) {\n      if (relate[i]['id'] == key) {\n        itemList.push(relate[i]);\n        break;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: doc === 'movies' ? itemList.map(key => {\n      const {\n        title,\n        price,\n        id,\n        rate,\n        description,\n        type,\n        imgUrl\n      } = key;\n      const oneType = type.includes(',') ? type.substr(0, type.indexOf(',')) : type;\n      return /*#__PURE__*/_jsxDEV(RelatedItem, {\n        title: title,\n        id: id,\n        doc: doc,\n        imgUrl: imgUrl,\n        price: price,\n        type: type,\n        rate: rate,\n        description: description\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 28\n      }, this);\n    }) : doc === 'books' ? itemList.map(key => {\n      const {\n        title,\n        price,\n        id,\n        author,\n        rate,\n        description,\n        imgUrl\n      } = key;\n      return /*#__PURE__*/_jsxDEV(RelatedItem, {\n        title: title,\n        doc: doc,\n        id: id,\n        imgUrl: imgUrl,\n        price: price,\n        author: author,\n        rate: rate,\n        description: description\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 28\n      }, this);\n    }) : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_c = RelatedCollection;\n\nconst mapStateToProps = (state, ownProps) => ({\n  items: selectItemsByOption(ownProps.doc)(state)\n});\n\nexport default connect(mapStateToProps)(RelatedCollection);\n\nvar _c;\n\n$RefreshReg$(_c, \"RelatedCollection\");","map":{"version":3,"sources":["C:/Users/Admin/google-play/client/src/page/Related-Collection/Related-Collection.page.jsx"],"names":["React","useEffect","RelatedItem","createStructuredSelector","connect","selectMovies","selectItemsByOption","selectRelatedCollection","realpath","RelatedCollection","id","type","items","doc","randomList","typeArr","split","relate","console","log","index","item","arr","one","map","key","parseInt","Object","keys","value","includes","list","push","i","length","j","splice","relateId","ranlist","random","Math","floor","itemList","title","price","rate","description","imgUrl","oneType","substr","indexOf","author","mapStateToProps","state","ownProps"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react'\r\nimport RelatedItem from '../../component/related-Item/Related-Item.component'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { connect } from 'react-redux'\r\nimport { selectMovies, selectItemsByOption,selectRelatedCollection } from '../../redux/store/store.selector'\r\nimport { realpath } from 'fs'\r\n\r\nconst RelatedCollection=({id,type,items,doc})=>{\r\n        const randomList = []\r\n        const typeArr = type.split(',')\r\n        const relate = []\r\n\r\n        console.log(items)\r\n        //function to return in the index of given value from the given list\r\n        const index=(item,arr)=>{\r\n            var one = 0\r\n            arr.map((key,index)=>{\r\n                if(parseInt(key) == parseInt(item)){\r\n                    one = index\r\n                }\r\n            })\r\n            return one\r\n        }\r\n\r\n        //create relate list with every related item include the current type\r\n        Object.keys(items).map((key,value)=>{\r\n            if(typeArr.includes(key)){\r\n                const list = items[key]\r\n                Object.keys(list).map((key)=>{\r\n                    relate.push(list[key])\r\n                })\r\n            }\r\n        })    \r\n\r\n        //erase every duplicate item\r\n        for(var i = 0;i < relate.length;i++){\r\n            for(var j = i+1;j < relate.length - 1 ; j++){\r\n                if(relate[i]['id'] == relate[j]['id']){\r\n                    relate.splice(j,1)\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(relate)\r\n\r\n        //select relate more specific\r\n        \r\n\r\n\r\n        //the id of items except the chosen id\r\n        const relateId = []\r\n        relate.map(item=>{\r\n            if(item['id'] != id){\r\n                relateId.push(item['id'])\r\n            }\r\n        })\r\n\r\n        //randomize the id list\r\n        var ranlist = []\r\n        while(relateId.length>0){\r\n            var random = relateId[Math.floor(Math.random() * relateId.length)];\r\n            ranlist.push(random)\r\n            relateId.splice(index(random,relateId),1)\r\n        }\r\n\r\n        //create list of items followed id list order\r\n        const itemList = []\r\n        ranlist.map((key)=>{\r\n            for(var i=0;i<relate.length;i++){\r\n                if(relate[i]['id']==key){\r\n                    itemList.push(relate[i])\r\n                    break\r\n                }\r\n            }\r\n        })\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            doc === 'movies'\r\n            ?\r\n                itemList.map(key=>{\r\n                    const {title,price,id,rate,description,type,imgUrl} = key\r\n                    const oneType = type.includes(',') ? type.substr(0,type.indexOf(',')):type  \r\n                    return <RelatedItem title={title} id={id} doc={doc} key={id} imgUrl={imgUrl} price={price} type={type}\r\n                                            rate={rate} description={description}></RelatedItem>\r\n                }) \r\n            :\r\n            doc === 'books'\r\n            ?\r\n                itemList.map(key=>{\r\n                    const {title,price,id,author,rate,description,imgUrl} = key\r\n                    return <RelatedItem title={title} doc={doc} id={id} key={id} imgUrl={imgUrl} price={price} \r\n                            author={author} rate={rate} description={description}></RelatedItem>\r\n            }) \r\n            :\r\n                []\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps)=>({\r\n    items:selectItemsByOption(ownProps.doc)(state)\r\n})\r\nexport default connect(mapStateToProps)(RelatedCollection)\r\n"]},"metadata":{},"sourceType":"module"}