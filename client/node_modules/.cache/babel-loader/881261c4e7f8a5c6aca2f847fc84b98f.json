{"ast":null,"code":"import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/firebase.utils';\nimport { selectPersonSuccess, selectPersonFailure } from './person.action';\nimport PersonActionTypes from './person.type';\nexport function* selectPerson({\n  payload: {\n    name,\n    job\n  }\n}) {\n  const collectionRef = firestore.collection('people');\n\n  try {\n    const collection = yield collectionRef.doc(job);\n    const snapShot = yield collection.get();\n    const {\n      people\n    } = snapShot.data();\n    var person = null;\n    people.map(pp => {\n      if (pp.name === name) {\n        person = pp;\n        return;\n      }\n    });\n    yield put(selectPersonSuccess({\n      job: job,\n      ...person\n    }));\n  } catch (error) {\n    yield put(selectPersonFailure(error.message));\n  }\n}\nexport function* onSelectPerson() {\n  yield takeLatest(PersonActionTypes.SELECT_PERSON_START, selectPerson);\n}\nexport function* personSaga() {\n  yield all([call(onSelectPerson)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/google-play/client/src/redux/person/person.saga.js"],"names":["takeLatest","call","all","put","firestore","selectPersonSuccess","selectPersonFailure","PersonActionTypes","selectPerson","payload","name","job","collectionRef","collection","doc","snapShot","get","people","data","person","map","pp","error","message","onSelectPerson","SELECT_PERSON_START","personSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,mBAAT,EAA6BC,mBAA7B,QAAwD,iBAAxD;AACA,OAAOC,iBAAP,MAA8B,eAA9B;AAEA,OAAO,UAAWC,YAAX,CAAwB;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN;AAAT,CAAxB,EAA6C;AAChD,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,QAArB,CAAtB;;AACA,MAAG;AACC,UAAMA,UAAU,GAAG,MAAMD,aAAa,CAACE,GAAd,CAAkBH,GAAlB,CAAzB;AACA,UAAMI,QAAQ,GAAG,MAAMF,UAAU,CAACG,GAAX,EAAvB;AACA,UAAM;AAACC,MAAAA;AAAD,QAAWF,QAAQ,CAACG,IAAT,EAAjB;AACA,QAAIC,MAAM,GAAG,IAAb;AACAF,IAAAA,MAAM,CAACG,GAAP,CAAWC,EAAE,IAAE;AACX,UAAGA,EAAE,CAACX,IAAH,KAAYA,IAAf,EAAoB;AACjBS,QAAAA,MAAM,GAAGE,EAAT;AACA;AACF;AACJ,KALD;AAMA,UAAMlB,GAAG,CAACE,mBAAmB,CAAC;AAACM,MAAAA,GAAG,EAACA,GAAL;AAAS,SAAGQ;AAAZ,KAAD,CAApB,CAAT;AACH,GAZD,CAYC,OAAMG,KAAN,EAAY;AACT,UAAMnB,GAAG,CAACG,mBAAmB,CAACgB,KAAK,CAACC,OAAP,CAApB,CAAT;AACH;AACJ;AAED,OAAO,UAAWC,cAAX,GAA2B;AAC9B,QAAMxB,UAAU,CAACO,iBAAiB,CAACkB,mBAAnB,EAAuCjB,YAAvC,CAAhB;AACH;AAED,OAAO,UAAWkB,UAAX,GAAuB;AAC1B,QAAMxB,GAAG,CAAC,CAACD,IAAI,CAACuB,cAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,call,all,put} from 'redux-saga/effects';\r\nimport { firestore } from '../../firebase/firebase.utils';\r\nimport { selectPersonSuccess,selectPersonFailure } from './person.action';\r\nimport PersonActionTypes from './person.type';\r\n\r\nexport function * selectPerson({payload:{name,job}}){\r\n    const collectionRef = firestore.collection('people')\r\n    try{\r\n        const collection = yield collectionRef.doc(job)\r\n        const snapShot = yield collection.get()\r\n        const {people} = snapShot.data()\r\n        var person = null\r\n        people.map(pp=>{\r\n            if(pp.name === name){\r\n               person = pp\r\n               return \r\n            }\r\n        })\r\n        yield put(selectPersonSuccess({job:job,...person}))\r\n    }catch(error){\r\n        yield put(selectPersonFailure(error.message))\r\n    }\r\n}\r\n\r\nexport function * onSelectPerson(){\r\n    yield takeLatest(PersonActionTypes.SELECT_PERSON_START,selectPerson)\r\n}\r\n\r\nexport function * personSaga(){\r\n    yield all([call(onSelectPerson)])\r\n}"]},"metadata":{},"sourceType":"module"}